# Default values for influxdb-relay.

replicaCount: 2

image:
  repository: kingsd/influxdb-relay
  tag: latest
  pullPolicy: IfNotPresent

## Specify a service type
## NodePort is default
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  type: ClusterIP
  ##  If using NodePort or ClusterIP, UDP is supported. If using LoadBalancer, consult your LoadBalancer providers docs to see if UDP is supported
  udp_enabled: false
  ## Add annotations to service
  # annotations: {}
  default_dns_suffix: svc.cluster.local


## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
resources:
  requests:
    memory: 256Mi
    cpu: 0.1
  limits:
    memory: 16Gi
    cpu: 8

## Configure ingress support
ingress:
  enabled: false
  tls: false
  # secretName: my-tls-cert # only needed if tls above is true
  hostname: influxdb-relay.foobar.com
  annotations:
    # kubernetes.io/ingress.class: "nginx"
    # kubernetes.io/tls-acme: "true"

## Node labels for pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Pod AntiAffinity
## toggling to true will enable a soft antiaffinity rule, which will try to distribute pods across nodes
podAntiAffinity:
  enabled: true

## Relay Port
## Sets the port for the influxdb-relay container. Should match the HTTP_BIND_ADDR & UDP_BIND_ADDR environmental variables passed to the application
relay_port: 9096


config:
  http:
    name: relay-http
    bind_addr: :9096
    health_timeout_ms: 10000
    rate_limit: 5
    burst_limit: 10
    default_ping_response: 200
  http_output:
    name: http-backend
    # location: http://{{ template "influxdb-relay.influxdb.fullname" $root }}-{{ $i }}.{{ template "influxdb-relay.influxdb.fullname" $root }}-headless.{{ $root.Release.Namespace }}.{{ $root.Values.service.default_dns_suffix }}:{{ $root.Values.influxdb.config.http.bind_address }}/
    endpoints: write="/write",ping="/ping",query="/query"
    timeout: 10s
    skip_tls_verification: false
  udp:
    name: relay-udp
    bind_addr: :9096
    read_buffer: 0
    precision: "n"
  udp_output:
    name: udp-backend
    # location: {{ template "influxdb-relay.influxdb.fullname" $root }}-{{ $i }}.{{ template "influxdb-relay.influxdb.fullname" $root }}-headless.{{ $root.Release.Namespace }}.{{ $root.Values.service.default_dns_suffix }}:{{ $root.Values.influxdb.config.udp.bind_address }}
    mtu: 512


## ------------------------------------------------------
## InfluxDB
## ------------------------------------------------------
influxdb:
  ## If true, install the influxdb chart alongside influxdb-relay
  ## ref: ../influxdb
  enabled: true
  replicas: 2
  persistence:
    enabled: true
    size: 8Gi
  config:
    http:
      bind_address: 8086
    udp:
      enabled: true
      bind_address: 8089

####### Nginx
nginx:
  image:
    repository: nginx
    tag: 1.17.1
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName

  ## String to partially override nginx.fullname template (will maintain the release name)
  ##
  # nameOverride:

  ## String to fully override nginx.fullname template
  ##
  # fullnameOverride:

  ## Kubernetes configuration
  ## For minikube, set this to NodePort, elsewhere use LoadBalancer
  ##
  service:
    type: NodePort
    ## Provide optional annotations to the service i.e. for external-dns
    # annotations:
    #   external-dns.alpha.kubernetes.io/hostname: yourservicename.k8s.yourcompany.com
    ##
    ## HTTP Port
    port: 80
    ##
    ## loadBalancerIP:
    ## nodePorts:
    ##   http: <to set explicitly, choose port between 30000-32767>
    nodePorts:
      http: ""
      relay: ""
    ## Enable client source IP preservation
    ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    ##
    externalTrafficPolicy: Cluster

  ## Configure the ingress resource that allows you to access the
  ## NGINX installation. Set up the URL
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ##
  ingress:
    ## Set to true to enable ingress record generation
    enabled: false

    ## Set this to true in order to add the corresponding annotations for cert-manager
    certManager: false

    ## Ingress annotations done as key:value pairs
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
    ##
    ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
    ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
    annotations:
    #  kubernetes.io/ingress.class: nginx

    ## The list of hostnames to be covered with this ingress record.
    ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
    hosts:
    - name: nginx.local
      path: /

    ## The tls configuration for the ingress
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    tls:
    - hosts:
        - nginx.local
      secretName: nginx.local-tls

    secrets:
    ## If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or
    ## -----BEGIN RSA PRIVATE KEY-----
    ##
    ## name should line up with a tlsSecret set further up
    ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
    ##
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    # - name: nginx.local-tls
    #   key:
    #   certificate:

  nginxConfig:
    user: nginx
    worker_processes: 1
    worker_connections: 1024
    http:
      sendfile: "on"
      keepalive_timeout: 65
    stream:
      udp_listen: 9096
      proxy_timeout: 1s
      proxy_responses: 1
  
  serverConfig:
    client_max_body_size: "20M"

  ## Liveness Probe. The block is directly forwarded into the deployment, so you can use whatever livenessProbe configuration you want.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  livenessProbe:
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 30
    timeoutSeconds: 5
    failureThreshold: 6

  ## Readiness Probe. The block is directly forwarded into the deployment, so you can use whatever readinessProbe configuration you want.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  readinessProbe:
    httpGet:
      path: /
      port: 80
    initialDelaySeconds: 5
    timeoutSeconds: 3
    periodSeconds: 5

  ## Pod annotations
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}

  ## Resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  # resources: {}

  ## Prometheus Exporter / Metrics
  ##
  metrics:
    enabled: false
    image:
      registry: docker.io
      repository: nginx/nginx-prometheus-exporter
      tag: 0.1.0
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ##
      # pullSecrets:
      #   - myRegistryKeySecretName
    ## Metrics exporter pod Annotation and Labels
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9113"
      ## Metrics exporter resource requests and limits
      ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
      ##
    # resources: {}